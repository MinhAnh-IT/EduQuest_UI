# EduQuest API Documentation

## Authentication APIs

### 1. Forgot Password
Initiates the password reset process by sending an OTP to the user's registered email.

**Endpoint:** `POST /api/auth/forgot-password`

**Request Body:**
```json
{
    "username": "johndoe"
}
```

**Response:**
```json
{
    "code": 200,
    "message": "OTP has been sent to your email",
    "data": null
}
```

**Error Responses:**
- User not found:
  ```json
  {
      "code": 404,
      "message": "User not found",
      "data": null
  }
  ```
- Email sending failed:
  ```json
  {
      "code": 500,
      "message": "Failed to send email",
      "data": null
  }
  ```

### 2. Verify OTP
Verifies the OTP sent to the user's email. Successful verification allows the user to proceed to reset their password.

**Endpoint:** `POST /api/auth/verify-otp`

**Request Body:**
```json
{
    "username": "johndoe",
    "otp": "123456"
}
```

**Response:**
```json
{
    "code": 200,
    "message": "OTP verified successfully. You can now reset your password.",
    "data": null
}
```

**Error Responses:**
- User not found:
  ```json
  {
      "code": 404,
      "message": "User not found",
      "data": null
  }
  ```
- Invalid OTP:
  ```json
  {
      "code": 400,
      "message": "Invalid or expired OTP",
      "data": null
  }
  ```

### 3. Reset Password
Resets the user's password after successful OTP verification.

**Endpoint:** `POST /api/auth/reset-password`

**Request Body:**
```json
{
    "username": "johndoe",
    "newPassword": "newSecurePassword123"
}
```

**Response:**
```json
{
    "code": 200,
    "message": "Password reset successful",
    "data": null
}
```

**Error Responses:**
- User not found:
  ```json
  {
      "code": 404,
      "message": "User not found",
      "data": null
  }
  ```
- OTP verification needed or session expired:
  ```json
  {
      "code": 400,
      "message": "OTP must be verified before password can be reset, or the session has expired.",
      "data": null
  }
  ```
- Invalid password format (example):
  ```json
  {
      "code": 400,
      "message": "Bad Request", 
      "data": null
  }
  ```

### 4. Logout
Invalidates the current user's JWT token.

**Endpoint:** `POST /api/auth/logout`

**Headers:**
```
Authorization: Bearer {jwt_token}
```

**Response:**
```json
{
    "code": 200,
    "message": "Logged out successfully",
    "data": null
}
```

**Error Responses:**
- Invalid or expired token:
  ```json
  {
      "code": 401,
      "message": "Invalid or expired token",
      "data": null
  }
  ```

## Security Implementation Details

1. **Password Security:**
   - Passwords are encrypted using BCrypt before storage
   - Minimum password requirements: 8 characters, including uppercase, lowercase, numbers

2. **Token Management:**
   - JWT tokens are used for authentication
   - Tokens are blacklisted in Redis upon logout
   - Token expiration time: 24 hours

3. **OTP System:**
   - 6-digit numeric OTP
   - OTP validity: 5 minutes
   - OTP is sent via email using configured SMTP server
   - Rate limiting: Maximum 3 OTP requests per hour per email

## Error Codes / Status Codes

The API uses the following status codes, generally returned in the `code` field of the JSON response:

- `200 (OK)`: Success. (e.g., OTP sent, general successful operations)
- `200 (PASSWORD_RESET_SUCCESS)`: Password reset successful.
- `200 (LOGOUT_SUCCESS)`: Logged out successfully.
- `200 (OTP_VERIFIED_SUCCESS)`: OTP verified successfully. You can now reset your password.
- `400 (BAD_REQUEST)`: Bad Request. (Generic, e.g. invalid input, invalid password format)
- `400 (INVALID_OTP)`: Invalid or expired OTP.
- `400 (OTP_VERIFICATION_NEEDED)`: OTP must be verified before password can be reset, or the session has expired.
- `401 (INVALID_TOKEN)`: Invalid or expired token.
- `404 (NOT_FOUND)`: Not Found. (Generic)
- `404 (USER_NOT_FOUND)`: User not found.
- `500 (EMAIL_SEND_ERROR)`: Failed to send email.
- `500 (INTERNAL_SERVER_ERROR)`: Internal Server Error. (Generic server-side issue)