# T√†i li·ªáu API EduQuest

## M·ª•c l·ª•c
1. [Authentication APIs](#authentication-apis)
   - [ForgotPassword API](#forgotpassword-api)
   - [Logout API](#logout-api)
2. [Class Management APIs](#class-management-apis)
   - [JoinClass API](#joinclass-api)
   - [LeaveClass API](#leaveclass-api)
3. [Common Information](#common-information)
   - [M√£ l·ªói ph·ªï bi·∫øn](#m√£-l·ªói-ph·ªï-bi·∫øn)
   - [L∆∞u √Ω quan tr·ªçng](#l∆∞u-√Ω-quan-tr·ªçng)

---

## Authentication APIs

### Logout API

**Endpoint:** `POST /api/auth/logout`

**M√¥ t·∫£:** ƒêƒÉng xu·∫•t v√† x√≥a session c·ªßa ng∆∞·ªùi d√πng.

**Headers:**
```
Authorization: Bearer {access_token}
```

**Ph·∫£n h·ªìi th√†nh c√¥ng:**
```json
{
  "code": 200,
  "message": "Logout successful"
}
```

### ForgotPassword API

Quy tr√¨nh ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u bao g·ªìm 3 b∆∞·ªõc:
1. Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
2. X√°c th·ª±c m√£ OTP
3. ƒê·∫∑t m·∫≠t kh·∫©u m·ªõi

### 1. Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u

**Endpoint:** `POST /api/auth/forgot-password`

**M√¥ t·∫£:** G·ª≠i y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u b·∫±ng username. H·ªá th·ªëng s·∫Ω g·ª≠i m√£ OTP ƒë·∫øn email c·ªßa ng∆∞·ªùi d√πng.

**Request Body:**
```json
{
  "username": "t√™n_ƒëƒÉng_nh·∫≠p"
}
```

**Ph·∫£n h·ªìi th√†nh c√¥ng:**
```json
{
  "code": 200,
  "message": "Success",
  "data": true
}
```

**Ph·∫£n h·ªìi l·ªói:**
```json
{
  "code": 430,
  "message": "User not found"
}
```

### 2. X√°c th·ª±c m√£ OTP

**Endpoint:** `POST /api/auth/verify-otp-forgot-password`

**M√¥ t·∫£:** X√°c th·ª±c m√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa ng∆∞·ªùi d√πng.

**Request Body:**
```json
{
  "username": "t√™n_ƒëƒÉng_nh·∫≠p",
  "otp": "123456"
}
```

**Ph·∫£n h·ªìi th√†nh c√¥ng:**
```json
{
  "code": 200,
  "message": "Success",
  "data": true
}
```

**Ph·∫£n h·ªìi l·ªói:**
```json
{
  "code": 401,
  "message": "Invalid or expired OTP"
}
```

### 3. ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi

**Endpoint:** `POST /api/auth/reset-password`

**M√¥ t·∫£:** ƒê·∫∑t m·∫≠t kh·∫©u m·ªõi sau khi ƒë√£ x√°c th·ª±c OTP th√†nh c√¥ng.

**Request Body:**
```json
{
  "username": "t√™n_ƒëƒÉng_nh·∫≠p",
  "newPassword": "m·∫≠t_kh·∫©u_m·ªõi"
}
```

**Ph·∫£n h·ªìi th√†nh c√¥ng:**
```json
{
  "code": 200,
  "message": "Success",
  "data": true
}
```

**Ph·∫£n h·ªìi l·ªói:**
```json
{
  "code": 402,
  "message": "OTP must be verified before resetting the password or the session has expired"
}
```

## JoinClass API

### üîê Quan tr·ªçng: X√°c th·ª±c cho Giao di·ªán Di ƒë·ªông

**ƒê·ªÉ tham gia l·ªõp h·ªçc tr√™n ·ª©ng d·ª•ng mobile, ng∆∞·ªùi d√πng PH·∫¢I l·∫•y token th√¥ng qua qu√° tr√¨nh ƒëƒÉng nh·∫≠p. D∆∞·ªõi ƒë√¢y l√† lu·ªìng ho√†n ch·ªânh:**

#### B∆∞·ªõc 1: ƒêƒÉng nh·∫≠p ƒë·ªÉ l·∫•y Token

**Endpoint:** `POST /api/auth/login`

**Request Body:**
```json
{
  "username": "t√™n_ƒëƒÉng_nh·∫≠p",
  "password": "m·∫≠t_kh·∫©u"
}
```

**Response th√†nh c√¥ng:**
```json
{
  "code": 200,
  "message": "Success",
  "data": {
    "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
  }
}
```

**üíæ L∆∞u tr·ªØ Token trong App Mobile:**
- üì± L∆∞u `accessToken` trong b·ªô nh·ªõ t·∫°m (c√≥ th·ªùi h·∫°n 1 gi·ªù - 3600 seconds)
- üîí L∆∞u `refreshToken` trong b·ªô nh·ªõ an to√†n nh∆∞ Keychain/Keystore (c√≥ th·ªùi h·∫°n 30 ng√†y)
- ‚úÖ S·ª≠ d·ª•ng `accessToken` trong header Authorization cho t·∫•t c·∫£ API calls
- üîÑ T·ª± ƒë·ªông refresh token khi accessToken s·∫Øp h·∫øt h·∫°n

**‚ö†Ô∏è X·ª≠ l√Ω Token trong Mobile App:**
```javascript
// L∆∞u token sau khi login th√†nh c√¥ng
localStorage.setItem('accessToken', response.data.accessToken);
localStorage.setItem('refreshToken', response.data.refreshToken);

// S·ª≠ d·ª•ng token trong c√°c API call
const config = {
  headers: {
    'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
    'Content-Type': 'application/json'
  }
};
```

#### B∆∞·ªõc 2: L√†m m·ªõi Token khi h·∫øt h·∫°n

**Endpoint:** `POST /api/auth/refresh-token`

**Request Body:**
```json
{
  "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}
```

**Response:**
```json
{
  "code": 200,
  "message": "Success",
  "data": {
    "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
  }
}
```

**üîÑ T·ª± ƒë·ªông Refresh Token Logic:**
```javascript
// Ki·ªÉm tra v√† refresh token t·ª± ƒë·ªông
async function checkAndRefreshToken() {
  const accessToken = localStorage.getItem('accessToken');
  const refreshToken = localStorage.getItem('refreshToken');
  
  // Ki·ªÉm tra token c√≥ h·∫øt h·∫°n kh√¥ng (decode JWT)
  if (isTokenExpired(accessToken) && refreshToken) {
    try {
      const response = await refreshTokenAPI(refreshToken);
      localStorage.setItem('accessToken', response.data.accessToken);
      localStorage.setItem('refreshToken', response.data.refreshToken);
      return response.data.accessToken;
    } catch (error) {
      // Redirect to login n·∫øu refresh th·∫•t b·∫°i
      redirectToLogin();
    }
  }
  return accessToken;
}
```

### 1. Tham gia l·ªõp h·ªçc

**Endpoint:** `POST /api/enrollments/join`

**M√¥ t·∫£:** Cho ph√©p h·ªçc sinh ƒë√£ ƒëƒÉng nh·∫≠p tham gia v√†o l·ªõp h·ªçc b·∫±ng m√£ l·ªõp h·ªçc.

**Headers:**
```
Authorization: Bearer {access_token}
```

**Request Body:**
```json
{
  "classCode": "CNPM2025"
}
```

**Ph·∫£n h·ªìi th√†nh c√¥ng:**
```json
{
  "code": 200,
  "message": "Success",
  "data": {
    "id": 1,
    "studentId": 1,
    "studentName": "L√™ H·ªçc Sinh",
    "classId": 1,
    "className": "L·ªõp C√¥ng Ngh·ªá Ph·∫ßn M·ªÅm",
    "enrolledAt": "2025-06-14T10:30:00Z",
    "message": "Successfully enrolled in class: L·ªõp C√¥ng Ngh·ªá Ph·∫ßn M·ªÅm"
  }
}
```

**Ph·∫£n h·ªìi l·ªói:**
```json
{
  "code": 409,
  "message": "Student is already enrolled in this class"
}
```

### 2. Ki·ªÉm tra m√£ l·ªõp h·ªçc

**Endpoint:** `POST /api/enrollments/validate`

**M√¥ t·∫£:** Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa m√£ l·ªõp h·ªçc m√† kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p ho·∫∑c tham gia l·ªõp.

**Request Body:**
```json
{
  "classCode": "CNPM2025"
}
```

**Ph·∫£n h·ªìi th√†nh c√¥ng:**
```json
{
  "code": 200,
  "message": "Success",
  "data": {
    "exists": true,
    "className": "L·ªõp C√¥ng Ngh·ªá Ph·∫ßn M·ªÅm",
    "instructorName": "Nguy·ªÖn VƒÉn Gi·∫£ng"
  }
}
```

**Ph·∫£n h·ªìi l·ªói:**
```json
{
  "code": 404,
  "message": "Class not found with the provided code"
}
```

## LeaveClass API

**Endpoint:** `DELETE /api/enrollments/leave/{classId}`

**M√¥ t·∫£:** Cho ph√©p h·ªçc sinh ƒë√£ ƒëƒÉng nh·∫≠p r·ªùi kh·ªèi l·ªõp h·ªçc ƒë√£ tham gia.

**Headers:**
```
Authorization: Bearer {access_token}
```

**Parameters:**
- `classId`: ID c·ªßa l·ªõp h·ªçc mu·ªën r·ªùi kh·ªèi

**Ph·∫£n h·ªìi th√†nh c√¥ng:**
```json
{
  "code": 200,
  "message": "Success",
  "data": true
}
```

**Ph·∫£n h·ªìi l·ªói:**
```json
{
  "code": 404,
  "message": "Student is not enrolled in this class"
}
```

ho·∫∑c

```json
{
  "code": 400,
  "message": "Bad request"
}
```

### M√£ l·ªói ph·ªï bi·∫øn

| M√£ | Tin nh·∫Øn | M√¥ t·∫£ |
|----|----------|-------|
| 200 | Success | Y√™u c·∫ßu th√†nh c√¥ng |
| 400 | Bad request | Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá (th∆∞·ªùng l√† do thi·∫øu token x√°c th·ª±c) |
| 401 | Invalid or expired OTP | OTP kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n |
| 402 | OTP verification needed | C·∫ßn x√°c th·ª±c OTP tr∆∞·ªõc khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u |
| 403 | User is not a student | Ng∆∞·ªùi d√πng kh√¥ng ph·∫£i l√† h·ªçc sinh |
| 404 | Class not found/Student not enrolled | Kh√¥ng t√¨m th·∫•y l·ªõp ho·∫∑c h·ªçc sinh kh√¥ng ƒëƒÉng k√Ω l·ªõp |
| 409 | Student is already enrolled in this class | H·ªçc sinh ƒë√£ ƒëƒÉng k√Ω l·ªõp n√†y |
| 430 | User not found | Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng |

### L∆∞u √Ω quan tr·ªçng

1. Khi g·ªçi API LeaveClass v√† JoinClass, token x√°c th·ª±c ph·∫£i ƒë∆∞·ª£c cung c·∫•p trong header `Authorization` v·ªõi ƒë·ªãnh d·∫°ng `Bearer {token}`.
2. **Gi·∫£i quy·∫øt l·ªói "Bad request" (400):**
   - **Nguy√™n nh√¢n ph·ªï bi·∫øn:** Token x√°c th·ª±c kh√¥ng ƒë∆∞·ª£c cung c·∫•p ho·∫∑c kh√¥ng h·ª£p l·ªá
   - **C√°ch kh·∫Øc ph·ª•c:**
     - ƒê·∫£m b·∫£o token ƒë∆∞·ª£c ƒë·∫∑t trong header v·ªõi ƒë·ªãnh d·∫°ng ch√≠nh x√°c: `Authorization: Bearer {token}`
     - Ki·ªÉm tra token ch∆∞a h·∫øt h·∫°n (th√¥ng th∆∞·ªùng token c√≥ th·ªùi h·∫°n 1 ti·∫øng)
     - ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p v√† c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông
     - Ki·ªÉm tra tham s·ªë `classId` h·ª£p l·ªá v√† t·ªìn t·∫°i trong h·ªá th·ªëng
3. Quy tr√¨nh OTP trong ForgotPassword c√≥ th·ªùi gian hi·ªáu l·ª±c gi·ªõi h·∫°n (th∆∞·ªùng l√† 10-15 ph√∫t). Sau th·ªùi gian n√†y, ng∆∞·ªùi d√πng c·∫ßn y√™u c·∫ßu OTP m·ªõi.

## üö® Troubleshooting: "Authentication token not found"

### M√¥ t·∫£ l·ªói:
```
I/flutter ( 5608): === Starting Join Class Request ===
I/flutter ( 5608): Class Code: CSDL2025
Authentication token not found
```

### üîç Nguy√™n nh√¢n:
·ª®ng d·ª•ng Flutter ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng nh∆∞ng **KH√îNG g·ª≠i token** trong header c·ªßa API request join class.

### ‚úÖ C√°ch kh·∫Øc ph·ª•c:

#### 1. Ki·ªÉm tra Token c√≥ ƒë∆∞·ª£c l∆∞u sau khi login kh√¥ng:

**Trong Flutter app, th√™m debug code:**
```dart
// Sau khi login th√†nh c√¥ng
print('=== Login Response ===');
print('Access Token: ${response.data.accessToken}');
print('Refresh Token: ${response.data.refreshToken}');

// L∆∞u token v√†o SharedPreferences
SharedPreferences prefs = await SharedPreferences.getInstance();
await prefs.setString('access_token', response.data.accessToken);
await prefs.setString('refresh_token', response.data.refreshToken);

print('=== Token Saved Successfully ===');
```

#### 2. Ki·ªÉm tra Token c√≥ ƒë∆∞·ª£c ƒë·ªçc khi join class kh√¥ng:

**Tr∆∞·ªõc khi g·ªçi API join class:**
```dart
// Debug: Ki·ªÉm tra token tr∆∞·ªõc khi join class
SharedPreferences prefs = await SharedPreferences.getInstance();
String? accessToken = prefs.getString('access_token');

print('=== Join Class Debug ===');
print('Class Code: $classCode');
print('Access Token: $accessToken');
print('Token exists: ${accessToken != null}');
print('Token length: ${accessToken?.length ?? 0}');
```

#### 3. ƒê·∫£m b·∫£o g·ª≠i token trong header:

**‚ùå SAI - Kh√¥ng c√≥ Authorization header:**
```dart
final response = await dio.post(
  '/api/enrollments/join',
  data: {
    'classCode': classCode,
  },
);
```

**‚úÖ ƒê√öNG - C√≥ Authorization header:**
```dart
SharedPreferences prefs = await SharedPreferences.getInstance();
String? accessToken = prefs.getString('access_token');

final response = await dio.post(
  '/api/enrollments/join',
  data: {
    'classCode': classCode,
  },
  options: Options(
    headers: {
      'Authorization': 'Bearer $accessToken',
      'Content-Type': 'application/json',
    },
  ),
);
```

#### 4. T·∫°o Interceptor ƒë·ªÉ t·ª± ƒë·ªông th√™m token:

**C√°ch t·ªët nh·∫•t - S·ª≠ d·ª•ng Dio Interceptor:**
```dart
class AuthInterceptor extends Interceptor {
  @override
  void onRequest(RequestOptions options, RequestInterceptorHandler handler) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? accessToken = prefs.getString('access_token');
    
    if (accessToken != null) {
      options.headers['Authorization'] = 'Bearer $accessToken';
      print('=== Token Added to Request ===');
      print('URL: ${options.path}');
      print('Token: ${accessToken.substring(0, 20)}...');
    } else {
      print('=== WARNING: No Token Found ===');
    }
    
    handler.next(options);
  }
}

// Th√™m interceptor v√†o Dio instance
dio.interceptors.add(AuthInterceptor());
```

#### 5. Ki·ªÉm tra format token:

**Debug request headers tr∆∞·ªõc khi g·ª≠i:**
```dart
print('=== Request Headers ===');
options.headers.forEach((key, value) {
  print('$key: $value');
});
```

**ƒê·∫£m b·∫£o format header ƒë√∫ng:**
```
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
```

### üîß Code m·∫´u ho√†n ch·ªânh cho Join Class:

```dart
Future<void> joinClass(String classCode) async {
  try {
    print('=== Starting Join Class Request ===');
    print('Class Code: $classCode');
    
    // 1. L·∫•y token t·ª´ storage
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? accessToken = prefs.getString('access_token');
    
    // 2. Ki·ªÉm tra token t·ªìn t·∫°i
    if (accessToken == null || accessToken.isEmpty) {
      print('‚ùå ERROR: No access token found');
      throw Exception('Please login first');
    }
    
    print('‚úÖ Access token found: ${accessToken.substring(0, 20)}...');
    
    // 3. G·ª≠i request v·ªõi token
    final response = await dio.post(
      '/api/enrollments/join',
      data: {
        'classCode': classCode,
      },
      options: Options(
        headers: {
          'Authorization': 'Bearer $accessToken',
          'Content-Type': 'application/json',
        },
      ),
    );
    
    print('‚úÖ Join class successful: ${response.data}');
    
  } catch (e) {
    print('‚ùå Join class failed: $e');
    
    // N·∫øu token h·∫øt h·∫°n, th·ª≠ refresh
    if (e.toString().contains('401') || e.toString().contains('token')) {
      await refreshTokenAndRetry(classCode);
    }
  }
}
```

### üîÑ Auto Refresh Token khi h·∫øt h·∫°n:

```dart
Future<void> refreshTokenAndRetry(String classCode) async {
  try {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? refreshToken = prefs.getString('refresh_token');
    
    if (refreshToken == null) {
      throw Exception('No refresh token, please login again');
    }
    
    // G·ªçi API refresh token
    final refreshResponse = await dio.post(
      '/api/auth/refresh-token',
      data: {
        'refreshToken': refreshToken,
      },
    );
    
    // L∆∞u token m·ªõi
    await prefs.setString('access_token', refreshResponse.data.data.accessToken);
    await prefs.setString('refresh_token', refreshResponse.data.data.refreshToken);
    
    print('‚úÖ Token refreshed successfully');
    
    // Th·ª≠ l·∫°i join class v·ªõi token m·ªõi
    await joinClass(classCode);
    
  } catch (e) {
    print('‚ùå Refresh token failed: $e');
    // Redirect to login screen
    Navigator.pushReplacementNamed(context, '/login');
  }
}
```

### üìã Checklist Debug:

- [ ] Token ƒë∆∞·ª£c l∆∞u sau khi login th√†nh c√¥ng
- [ ] Token ƒë∆∞·ª£c ƒë·ªçc tr∆∞·ªõc khi join class  
- [ ] Header Authorization c√≥ format ƒë√∫ng: "Bearer {token}"
- [ ] Kh√¥ng c√≥ k√Ω t·ª± th·ª´a ho·∫∑c space trong token
- [ ] Request ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ƒë√∫ng endpoint `/api/enrollments/join`
- [ ] Token ch∆∞a h·∫øt h·∫°n (ki·ªÉm tra th·ªùi gian t·∫°o)