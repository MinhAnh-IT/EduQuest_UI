# EduQuest API Documentation

## Authentication APIs

### 1. Forgot Password API

**Endpoint:** `POST /api/auth/forgot-password`

**Description:** Initiates password reset process by sending OTP to user's email asynchronously

**Request Body:**
```json
{
  "username": "string"
}
```

**Response:**
```json
{
  "code": 200,
  "message": "Success",
  "data": true
}
```

**Status Codes:**
- `200` - Success: OTP sent successfully (async)
- `430` - User Not Found: No account found with this username
- `501` - Email Send Error: Failed to send OTP
- `500` - Internal Server Error: Unexpected error occurred

**Business Logic:**
1. Validate username exists in database
2. Generate OTP using OTPService
3. Store OTP in Redis with expiration time
4. Send OTP email asynchronously (non-blocking)
5. Return success response immediately
6. Email is processed in background thread pool

**Notes:**
- Email sending is asynchronous for better performance
- User receives immediate response while email is sent in background
- OTP expires after configured time (default: minutes from config)
- Uses ThreadPoolTaskExecutor for email processing

---

### 2. Verify OTP Forgot Password API

**Endpoint:** `POST /api/auth/verify-otp-forgot-password`

**Description:** Verifies OTP for password reset process

**Request Body:**
```json
{
  "username": "string",
  "otp": "string"
}
```

**Response:**
```json
{
  "code": 200,
  "message": "Success",
  "data": true
}
```

**Status Codes:**
- `200` - Success: OTP verified successfully
- `403` - Invalid OTP: Invalid or expired OTP
- `430` - User Not Found: No account found with this username
- `500` - Internal Server Error: Unexpected error occurred

**Business Logic:**
1. Validate username and OTP are provided
2. Find user by username in database
3. Retrieve stored OTP from Redis using username key
4. Compare provided OTP with stored OTP
5. If valid, mark OTP as verified in Redis
6. Return success response

**Notes:**
- OTP must be verified before password can be reset
- Verified OTP has separate expiration time
- Invalid attempts don't extend OTP lifetime
- OTP can only be used once for verification

---

### 3. Reset Password API

**Endpoint:** `POST /api/auth/reset-password`

**Description:** Resets user password after OTP verification

**Request Body:**
```json
{
  "username": "string",
  "newPassword": "string"
}
```

**Response:**
```json
{
  "code": 200,
  "message": "Success",
  "data": true
}
```

**Status Codes:**
- `200` - Success: Password reset successfully
- `404` - OTP Verification Needed: OTP must be verified before resetting password
- `430` - User Not Found: User not found
- `450` - Validation Error: Invalid password format
- `500` - Internal Server Error: Unexpected error occurred

**Business Logic:**
1. Validate username and new password are provided
2. Check if OTP has been verified for this username
3. Find user by username in database
4. Hash new password using BCrypt
5. Update user password in database
6. Clear OTP verification status from Redis
7. Return success response

**Notes:**
- Requires prior OTP verification
- Password is hashed before storing
- OTP verification is cleared after successful reset
- New password must meet validation requirements

---

## Enrollment APIs

### 4. Join Class API

**Endpoint:** `POST /api/enrollments/join`

**Description:** Allows authenticated students to join a class using class code. Enrollment status is set to PENDING for instructor approval.

**Headers:**
```
Authorization: Bearer <JWT_TOKEN>
```

**Request Body:**
```json
{
  "classCode": "string"
}
```

**Response:**
```json
{
  "code": 200,
  "message": "Successfully joined the class. Your enrollment is pending approval.",
  "data": true
}
```

**Status Codes:**
- `200` - Success: Successfully joined class (pending approval)
- `401` - Class Code Required: Class code is required
- `402` - Authentication Required: You must be logged in to join a class
- `405` - User Not A Student: User is not registered as a student
- `406` - Class Not Found: Class not found with the provided code
- `409` - Already Enrolled: Student is already enrolled in this class
- `500` - Internal Server Error: Failed to join class

**Business Logic:**
1. Validate class code is provided and not empty
2. Extract and validate JWT token from Authorization header
3. Verify user is authenticated
4. Find student record associated with the user
5. Find class by class code
6. Check if student is already enrolled
7. Create new enrollment with status = PENDING
8. Save enrollment to database
9. Return success response

**Database Changes:**
- New enrollment record created with status = 'PENDING'
- Enrollment awaits instructor approval
- Unique constraint on (class_id, student_id) prevents duplicates

**Notes:**
- Requires valid JWT token in Authorization header
- Only users with STUDENT role can join classes
- Enrollment status is PENDING until instructor approves
- Class code must be exact match (case-sensitive)

---

### 5. Leave Class API

**Endpoint:** `DELETE /api/enrollments/leave/{classId}`

**Description:** Allows authenticated students to leave a class

**Headers:**
```
Authorization: Bearer <JWT_TOKEN>
```

**Path Parameters:**
- `classId`: Class ID to leave (number)

**Response:**
```json
{
  "code": 200,
  "message": "Successfully left the class",
  "data": true
}
```

**Status Codes:**
- `200` - Success: Successfully left the class
- `402` - Authentication Required: You must be logged in to leave a class
- `405` - User Not A Student: User is not registered as a student
- `407` - Class Not Found: Class not found with provided ID
- `408` - Not Enrolled: Student is not enrolled in this class
- `500` - Internal Server Error: Failed to leave class

**Business Logic:**
1. Extract and validate JWT token from Authorization header
2. Verify user is authenticated
3. Find student record associated with the user
4. Find class by ID
5. Find enrollment record for student and class
6. Delete enrollment record
7. Return success response

**Database Changes:**
- Enrollment record is deleted from database
- Student is immediately removed from class

**Notes:**
- Requires valid JWT token in Authorization header
- Only users with STUDENT role can leave classes
- Student must be enrolled in the class to leave it
- Uses class ID instead of class code for identification

---

## Enum Definitions

### EnrollmentStatus
```java
public enum EnrollmentStatus {
    PENDING("PENDING"),     // Waiting for instructor approval
    ENROLLED("ENROLLED"),   // Approved by instructor
    REJECTED("REJECTED")    // Rejected by instructor
}
```

### StatusCode (New Additions)
```java
CLASS_CODE_REQUIRED(401, "Class code is required"),
AUTHENTICATION_REQUIRED(402, "Authentication required"),
USER_NOT_A_STUDENT(405, "User is not a student"),
CLASS_NOT_FOUND_BY_CODE(406, "Class not found with the provided code"),
CLASS_NOT_FOUND_BY_ID(407, "Class not found with the provided ID"),
STUDENT_NOT_ENROLLED_IN_CLASS(408, "Student is not enrolled in this class"),
STUDENT_ALREADY_ENROLLED_IN_CLASS(409, "Student is already enrolled in this class")
```

## Database Schema Updates

### Enrollments Table
```sql
CREATE TABLE enrollments (
  id SERIAL PRIMARY KEY,
  class_id INT NOT NULL REFERENCES classes(id) ON DELETE CASCADE,
  student_id INT NOT NULL REFERENCES students(id) ON DELETE CASCADE,
  status TEXT CHECK (status IN ('PENDING', 'ENROLLED', 'REJECTED')) DEFAULT 'PENDING',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE (class_id, student_id)
);
```

## Configuration Updates

### Async Email Configuration
```java
@Configuration
@EnableAsync
public class AsyncConfig {
    @Bean(name = "emailTaskExecutor")
    public Executor emailTaskExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(2);
        executor.setMaxPoolSize(5);
        executor.setQueueCapacity(100);
        executor.setThreadNamePrefix("Email-");
        return executor;
    }
}
```